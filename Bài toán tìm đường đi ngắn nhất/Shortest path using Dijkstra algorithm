#include <iostream>
#include <vector>
#include <climits>
#include <queue>

using namespace std;

int n, s, a[15][15], parent[15];
vector<pair<int, int>> adj[15];
vector<int> d(15, INT_MAX);

void Dijkstra (int s) {
    d[s] = 0;
    parent[s] = s;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, s});
    while (!pq.empty()) {
        pair<int, int> top = pq.top();
        pq.pop();
        int kc = top.first, u = top.second;
        if (kc > d[u]) continue;
        for (auto it : adj[u]) {
            int v = it.first, w = it.second;
            if (d[v] > d[u] + w) {
                d[v] = d[u] + w;
                pq.push({d[v], v});
                parent[v] = u;
            }
        }
    }
}

int main() {
    cin >> n >> s;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cin >> a[i][j];
            if (a[i][j]) {
                adj[i].push_back({j, a[i][j]});
            }
        }
    }
    Dijkstra(s);
    for (int i = 1; i <= n; i++) {
        cout << "K/c " << s << " -> " << i << " = ";
        if (i == s) {
            cout << "0; " << s << " <- " << s << endl;
        } else if (d[i] == INT_MAX) {
            cout << "INF;" << endl;
        } else {
            cout << d[i] << "; ";
            vector<int> path[15];
            int j = i;
            while (j != s) {
                path[i].push_back(j);
                j = parent[j];
            }
            path[i].push_back(s);
            for (int j = 0; j < path[i].size(); j++) {
                if (j == path[i].size() - 1) {
                    cout << path[i][j];
                    break;
                } else {
                    cout << path[i][j] << " <- ";
                }
            }
            cout << endl;
        }
    }
    return 0;
}
