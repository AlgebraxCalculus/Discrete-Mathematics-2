#include <iostream>
#include <vector>
#include <cstring>
#include <stack>
#include <queue>

using namespace std;

int n, u, a[14][14];
bool visited[14];

struct Edge {
    int s, t;
};

void DFS (int u) {
    int sc = 0;
    Edge E[14];
    stack<int> st;
    st.push(u);
    visited[u] = true;
    while (!st.empty()) {
        int v = st.top();
        st.pop();
        for (int x = 1; x <= 13; x++) {
            if (a[v][x] && !visited[x]) {
                E[sc].s = v;
                E[sc].t = x;
                sc++;
                visited[x] = true;
                st.push(v);
                st.push(x);
                break;
            }
        }
    }
    for (int i = 0; i < sc; i++) {
        if (E[i].s < E[i].t) {
            cout << E[i].s << ' ' << E[i].t << endl;
        } else {
            cout << E[i].t << ' ' << E[i].s << endl;
        }
    }
}

void BFS (int u) {
    int sc = 0;
    Edge E[14];
    queue<int> q;
    q.push(u);
    visited[u] = true;
    while (!q.empty()) {
        int v = q.front();
        q.pop();
        for (int x = 1; x <= 13; x++) {
            if (a[v][x] && !visited[x]) {
                E[sc].s = v;
                E[sc].t = x;
                sc++;
                visited[x] = true;
                q.push(v);
                q.push(x);
            }
        }
    }
    for (int i = 0; i < sc; i++) {
        if (E[i].s < E[i].t) {
            cout << E[i].s << ' ' << E[i].t << endl;
        } else {
            cout << E[i].t << ' ' << E[i].s << endl;
        }
    }
}

int main() {
    cin >> n >> u;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cin >> a[i][j];
        }
    } 
    memset(visited, false, sizeof(visited));
    cout << "DFS tree" << endl;
    DFS(u);
    memset(visited, false, sizeof(visited));
    cout << "BFS tree" << endl;
    BFS(u);
    return 0;
}
